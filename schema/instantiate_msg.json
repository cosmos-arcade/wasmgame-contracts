{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "bins",
    "cw20_token_address",
    "stage_bid",
    "stage_claim_airdrop",
    "stage_claim_prize",
    "ticket_price"
  ],
  "properties": {
    "bins": {
      "description": "The winning probability is associasted to the number of bins.",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "cw20_token_address": {
      "description": "Address of the token.",
      "type": "string"
    },
    "owner": {
      "description": "Owner if none set to info.sender.",
      "type": [
        "string",
        "null"
      ]
    },
    "stage_bid": {
      "description": "Info related to the bidding stage.",
      "allOf": [
        {
          "$ref": "#/definitions/Stage"
        }
      ]
    },
    "stage_claim_airdrop": {
      "description": "Info related to the airdrop claiming stage.",
      "allOf": [
        {
          "$ref": "#/definitions/Stage"
        }
      ]
    },
    "stage_claim_prize": {
      "description": "Info related to the prize claiming stage.",
      "allOf": [
        {
          "$ref": "#/definitions/Stage"
        }
      ]
    },
    "ticket_price": {
      "description": "Price of the ticket to bid.",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Scheduled": {
      "description": "Scheduled represents a point in time when an event happens. It can compare with a BlockInfo and will return is_triggered() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will schedule when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will schedule when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Stage": {
      "description": "Struct to manage start and end of static stages.",
      "type": "object",
      "required": [
        "duration",
        "start"
      ],
      "properties": {
        "duration": {
          "description": "Ending event for the stage.",
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            }
          ]
        },
        "start": {
          "description": "Starting event for the stage.",
          "allOf": [
            {
              "$ref": "#/definitions/Scheduled"
            }
          ]
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
